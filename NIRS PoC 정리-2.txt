TKG version upgrade (v1.3.0 -> v1.3.1)
** tkg v1.3.0 부터는 image repository 가 바뀜 ( registry.tkg.vmware.run -> projects.registry.vmware.com/tkg )
이걸 바꾸고 xxx-data-values 시크릿을 생성해야함 v1.2.0 -> v1.3.x 로 올라갈 때 유의

1. Tanzu cli v1.3.1 / kubectl cli v1.20.5 다운로드 --> my.vmware.com

2. 압축파일 압축해제  
# tar -xvf tanzu-cli-bundle-v1.3.1-linux-amd64.tar 
--> 압축해제 하면 cli/ 라는 디렉토리가 생성된다 

3. Tanzu cli v1.3.0 삭제 후 cli v1.3.1 적용 및 이전 버전 kubectl cli 삭제 후 새 버전 kubectl cli 적용

3-1. 이전버전 cli 삭제
# rm -rf /usr/local/bin/tanzu 
# rm -rf /usr/local/bin/kubectl 

3-2. 2번에서 압축해제 후 생성된 cli/ 디렉토리에서 core/ 디렉토리에 있는 cli 를 정해진 path에 복사한다 
cli/core/v1.3.1# cp tanzu-core-linux_amd64 /usr/local/bin/tanzu

3-2-1. 새 버전 kubectl cli 정해진 path 로 복사 
# cp kubectl-linux-v1.20.5-vmware.1 /usr/loca/bin/kubectl

3-3. tanzu cli / kubectl cli 버전 확인
# tanzu version
# kubectl version 

4. bom/ 디렉토리 삭제 후 새 버전 (tkg) bom 환경변수 export 

4-1. bom/ 디렉토리 삭제 
--> bom은 bill of materials의 약자이며, tkg management-cluster / cluster를 생성하기에 앞서 bom/ 디렉토리에 존재하는 특정 tkg version의 컨피그 YAML 파일을 참조하여 cluster를 생성한다 
--> bom/ 디렉토리는 tkg management-cluster 를 생성하면서 local machine 에 자동으로 만들어지는 .tanzu/ 디렉토리 안에서 확인가능  ./tanzu/tkg# rm -rf bom/ 

4-2. 새 버전 (tkg) 의 bom 환경변수 가져오기 
# export TKG_BOM_CUSTOM_IMAGE_TAG="v1.3.1-patch1"

5. tkg management-cluster 업그레이드 
# tanzu management-cluster upgrade <tkg name> --os-name photon --os-version 3 --os-arch amd64

--> 버전 1.20.5+vmware.2 photon 이미지를 자동적으로 선택하는 이유는 앞선 단계에서 패치버전인 v1.3.1-path1 를 export 하여서 이다

6. 업그레이드 된 management-cluster 상태 확인
# tanzu management-cluster get <tkg management-cluster name> 

7. tkg workload cluster 업그레이드 

7-1. tanzu workload cluster 로 context 변경  
# kubectl config use-context <tkg workload cluster context>

7-2. 업그레이드 완료한 management-cluster에 호환되는 tanzu kubernetes cluster (TKC) 용 kubernetes version 조회 
# tanzu kubernetes-release get 

7-3. 호환되는 tkc 버전을 적용하여 tkg workload cluster 업그레이드 
#  tanzu cluster upgrade <workload cluster name> --tkr=<호환되는 tkc 버전>

7-4. workload cluster 상태 확인 
# tanzu cluster get <workload cluster name>



Extension upgrade
사전 조건 
1. tkg-extensions-bundle 다운로드 
my.vmware.com

1-2. 다운로드 받은  tkg-extensions-bundle 압축해제  
#tar -xsvf tkg-extensions-manifests-v1.3.1-vmware.1.tar.gz

1-3. 압축해제 후 생성된 디렉토리로 가기 
eg) # tkg-extensions-v1.3.0+vmware.1/ 과 같은 이름으로 디렉토리가 생성된다 
--> 기호에 맞게 디렉토리명 변경

2. 클러스터가 Tanzu Mission Control과 연동되어있지 않다면 tmc-extension-manager 삭제
# kubectl delete -f tmc-extension-manager.yaml
--> 1-3 에서 생성된 디렉토리에서 cd extensions/ 로 가보면 YAML 파일 확인가능 

3. kapp-controller 업데이트 
# kubectl apply -f kapp-controller.yaml
--> 1-3 에서 생성된 디렉토리에서 cd extensions/ 로 가보면 YAML 파일 확인가능

4. cert-manager/ 업데이트 
# kubectl apply -f cert-manager/ 
--> cert-manager/ 디렉토리 전체를 업데이트 
--> 1-3 에서 생성된 디렉토리에서 cert-manager/ 디렉토리 확인 가능 

Extension upgrade 
사전조건 
- 1-3. 에서 생성된 디렉토리에 존재하는 파일을 이용하여 extension upgrade는 진행
- 클러스터가 TMC 에 연동이 되어있지 않다면 (배포된 extension 리소스 삭제)
  --> kubectl get extensions -A -> kubectl delete extensions <extension 이름> --namespace <해당 extension이 배포되어있는 네임스페이스>

contour upgrade

1.  data-values 예제 YAML 파일 복사 
extensions/ingress/contour/vsphere# cp contour-data-values-lb.yaml.example contour-data-values.yaml

2. contour-data-values 시크릿 업데이트 or 생성 
# kubectl create secret generic contour-data-values --from-file=values.yaml=<contour-data-value.yaml 디렉토리>/contour-data-values.yaml -n tanzu-system-ingress -o yaml --dry-run=client | kubectl replace -f -

3. 시크릿 조회 
# kubectl get secret contour-data-values -n tanzu-system-ingress -o 'go-template={{ index .data "values.yaml" }}' | base64 -d

4. contour 리소스 업데이트 
# kubectl apply -f contour-extension.yaml

5. app / contour 리소스 조회 및 상태 확인 
# kubectl get app -n tanzu-system-ingress contour
# kubectl get all -n tanzu-system-ingress

5-1. 외부 ip 확인 
--> 버전 업데이트 전과 같은 ip를 사용하는 것을 확인

Harbor upgrade 

1. harbor-data-values 시크릿 업데이트 
1-1. 예제 YAML 파일 복사 
# cp harbor-data-values.yaml.example harbor-data-values.yaml

1-2. 이전 버전에서 생성된 harbor-data-value 컨피그를 새로운 현재 사용할 harbor-data-values.yaml 에 옮기기 

1-3. harbor-data-values 시크릿 업데이트 
# kubectl create secret generic harbor-data-values --from-file=values.yaml=<harbor-data-values.yaml 디렉토리>/harbor-data-values.yaml -n tanzu-system-registry -o yaml --dry-run=client | kubectl replace -f -

1-4. harbor-data-values 시크릿 업데이트 확인 
# kubectl get secret harbor-data-values -n tanzu-system-registry -o 'go-template={{ index .data "values.yaml" }}' | base64 -d

2. harbor 리소스 업데이트 
# kubectl apply -f harbor-extensions.yaml

3. app / harbor 리소스 조회 및 상태 확인 
# kubectl get app -n tanzu-system-registry 
# kubectl get all -n tanzu-system-registry

4. harbor-data-values.yaml 에 정의한 harbor hostname DNS 에 정의한 후 브라우저로 접속 
http://<harbor-FQDN>


fluent-bit, prometheus, grafana는 위와 같은 방법으로 동일하게 upgrade를 진행

 



